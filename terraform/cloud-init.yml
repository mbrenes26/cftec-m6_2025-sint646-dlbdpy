#cloud-config
package_update: true
packages:
  - tmux
  - python3
  - python3-pip
  - docker.io
  - ca-certificates
  - curl

timezone: America/Costa_Rica

write_files:
  - path: /etc/profile.d/10-localbin.sh
    permissions: "0644"
    content: |
      export PATH="$HOME/.local/bin:$PATH"

  # Helper: start Kafka (KRaft) + Kafka UI on demand (dual listeners)
  - path: /opt/lab/bin/start_kafka.sh
    permissions: "0755"
    content: |
      #!/usr/bin/env bash
      set -Eeuo pipefail

      docker network create labnet >/dev/null 2>&1 || true
      docker rm -f kafka kafka-ui >/dev/null 2>&1 || true

      require_cmd(){ command -v "$1" >/dev/null 2>&1; }

      get_pub_ip_imds() {
        require_cmd curl || return 1
        curl -sS -m 3 -H Metadata:true \
          "http://169.254.169.254/metadata/instance/network/interface?api-version=2021-02-01" \
        | tr -d '\r' \
        | grep -oE '"publicIpAddress"\s*:\s*"[^"]+"' \
        | head -n1 | cut -d'"' -f4
      }
      get_pub_ip_ifconfig(){ require_cmd curl || return 1; curl -sS -m 3 https://ifconfig.me || true; }
      get_pub_ip_ipify(){  require_cmd curl || return 1; curl -sS -m 3 https://api.ipify.org || true; }

      PUBIP="$(get_pub_ip_imds || true)"
      if [[ -z "$PUBIP" || "$PUBIP" == "null" ]]; then
        PUBIP="$(get_pub_ip_ifconfig || true)"
      fi
      if [[ -z "$PUBIP" || "$PUBIP" == "null" ]]; then
        PUBIP="$(get_pub_ip_ipify || true)"
      fi

      PRIVIP="$(hostname -I 2>/dev/null | awk '{print $1}')"
      ADV_IP="${PUBIP:-$PRIVIP}"

      # Kafka KRaft con listener interno para Docker y externo para clientes
      docker run -d --name kafka --network labnet \
        -p 9092:9092 -p 29092:29092 \
        -e KAFKA_ENABLE_KRAFT=yes \
        -e KAFKA_CFG_NODE_ID=1 \
        -e KAFKA_CFG_PROCESS_ROLES=controller,broker \
        -e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093 \
        -e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \
        -e KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:29092,CONTROLLER://:9093 \
        -e KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://$ADV_IP:29092 \
        -e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT \
        -e KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL \
        -e ALLOW_PLAINTEXT_LISTENER=yes \
        --restart unless-stopped \
        bitnami/kafka:3.7

      docker run -d --name kafka-ui --network labnet \
        -p 9000:8080 \
        -e KAFKA_CLUSTERS_0_NAME=local \
        -e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092 \
        --restart unless-stopped \
        provectuslabs/kafka-ui:latest

      echo "Kafka bootstrap (external): ${ADV_IP}:29092"
      echo "Kafka UI:                  http://${ADV_IP}:9000"

  # Helper: start MySQL on demand (root:pass, DB: lab)
  - path: /opt/lab/bin/start_mysql.sh
    permissions: "0755"
    content: |
      #!/usr/bin/env bash
      set -Eeuo pipefail

      docker rm -f mysql >/dev/null 2>&1 || true
      mkdir -p /data/mysql
      docker run -d --name mysql \
        -p 3306:3306 \
        -v /data/mysql:/var/lib/mysql \
        -e MYSQL_ROOT_PASSWORD=pass \
        -e MYSQL_DATABASE=lab \
        --restart unless-stopped \
        mysql:8

      echo "MySQL listo en: 127.0.0.1:3306 (root/pass, db=lab)"
      
  - path: /opt/lab/sql/01_init_dw.sql
    permissions: "0644"
    content: |
      -- Inicializacion DWH
      CREATE DATABASE IF NOT EXISTS lab CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
      USE lab;

      CREATE TABLE IF NOT EXISTS dw_messages (
        id               VARCHAR(64)  NOT NULL PRIMARY KEY,
        user_id          VARCHAR(64)  NOT NULL,
        comment          TEXT         NOT NULL,
        ingest_ts        TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
        sentiment_label  ENUM('neg','neu','pos') NOT NULL,
        sentiment_score  FLOAT        NOT NULL,
        raw_json         JSON         NULL,
        INDEX idx_ingest_ts (ingest_ts DESC)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

  # Helper: start Metabase on demand
  - path: /opt/lab/bin/start_metabase.sh
    permissions: "0755"
    content: |
      #!/usr/bin/env bash
      set -Eeuo pipefail

      docker rm -f metabase >/dev/null 2>&1 || true
      mkdir -p /data/metabase
      docker run -d --name metabase \
        -p 3000:3000 \
        -v /data/metabase:/metabase-data \
        -e MB_DB_FILE=/metabase-data/metabase.db \
        --restart unless-stopped \
        metabase/metabase:latest

      echo "Metabase en: http://127.0.0.1:3000"

runcmd:
  - mkdir -p /opt/lab/bin
  - systemctl enable docker
  - systemctl start docker
  - bash -lc 'id azureuser && usermod -aG docker azureuser || true'

  # Jupyter (instalación; arranque manual vía workflow/script)
  - su - azureuser -c 'python3 -m pip install --user --upgrade pip'
  - su - azureuser -c 'python3 -m pip install --user "notebook<7"'
  - bash -lc 'echo "export PATH=\$HOME/.local/bin:\$PATH" >> /home/azureuser/.bashrc'
  - bash -lc 'echo "export PATH=\$HOME/.local/bin:\$PATH" >> /home/azureuser/.profile'
  - chown azureuser:azureuser /home/azureuser/.bashrc /home/azureuser/.profile

  # Pre-pull de imágenes necesarias (no arranca servicios)
  - docker pull mongo:6.0
  - docker pull mongo-express:latest
  - docker pull redis:7.2
  - docker pull redislabs/redisinsight:1.14.0
  - docker pull harisekhon/hbase:latest
  - docker pull bitnami/kafka:3.7
  - docker pull provectuslabs/kafka-ui:latest
  - docker pull mysql:8
  - docker pull metabase/metabase:latest