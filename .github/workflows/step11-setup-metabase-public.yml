name: Step11 - Setup Metabase (public IP, DB + charts + dashboard)

on:
  workflow_dispatch:
    inputs:
      admin_email:
        description: 'Correo admin Metabase'
        required: false
        default: 'admin@example.local'
      db_display_name:
        description: 'Nombre logico de la DB en Metabase'
        required: false
        default: 'DWH'
      admin_pass:
        description: 'Password admin Metabase (opcional; si vacio usa Secret o genera una)'
        required: false
        default: 'pass'

permissions:
  id-token: write
  contents: read

concurrency:
  group: vm-cftec-m62025-SINT646-labs
  cancel-in-progress: false

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  RESOURCE_GROUP: rg-cftec-m62025-SINT646
  VM_NAME: vm-cftec-m62025-SINT646-labs

jobs:
  setup-metabase-public:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure CLI Login (Service Principal)
        shell: bash
        run: |
          set -euo pipefail
          az login --service-principal \
            --username "$ARM_CLIENT_ID" \
            --password "$ARM_CLIENT_SECRET" \
            --tenant "$ARM_TENANT_ID"
          az account set --subscription "$ARM_SUBSCRIPTION_ID"

      - name: Get VM public IP
        id: getpip
        shell: bash
        run: |
          set -euo pipefail
          PUBIP="$(az vm list-ip-addresses \
            -g "$RESOURCE_GROUP" -n "$VM_NAME" \
            --query "[0].virtualMachine.network.publicIpAddresses[0].ipAddress" -o tsv)"
          if [[ -z "${PUBIP:-}" ]]; then
            echo "No public IP found for $VM_NAME" >&2
            exit 1
          fi
          echo "pubip=${PUBIP}" >> "$GITHUB_OUTPUT"

      - name: Ensure mysql/metabase in same Docker network (labnet)
        shell: bash
        run: |
          set -euo pipefail
          az vm run-command invoke \
            --resource-group "$RESOURCE_GROUP" --name "$VM_NAME" \
            --command-id RunShellScript \
            --scripts '
              set -eu
              docker network create labnet >/dev/null 2>&1 || true
              for svc in mysql metabase; do
                if docker ps --format "{{.Names}}" | grep -qx "$svc"; then
                  if ! docker network inspect labnet -f "{{json .Containers}}" | grep -q "$svc"; then
                    docker network connect labnet "$svc" || true
                  fi
                fi
              done
              echo "labnet OK; mysql/metabase conectados si estaban corriendo."
            ' \
            --query "value[0].message" -o tsv

      - name: Wait for Metabase to be ready (local healthcheck)
        shell: bash
        run: |
          set -euo pipefail
          az vm run-command invoke \
            --resource-group "$RESOURCE_GROUP" --name "$VM_NAME" \
            --command-id RunShellScript \
            --scripts '
              set -eu
              timeout="${1:-240}"
              start="$(date +%s)"
              while :; do
                code="$(curl -sS -m 2 -o /dev/null -w "%{http_code}" http://127.0.0.1:3000/api/health || true)"
                if [ "$code" = "200" ]; then
                  echo "Metabase responde /api/health (200)."
                  exit 0
                fi
                now="$(date +%s)"
                elapsed=$((now - start))
                if [ "$elapsed" -ge "$timeout" ]; then
                  echo "Metabase no listo tras ${timeout}s" >&2
                  docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | egrep "metabase|^NAMES" || true
                  exit 1
                fi
                sleep 3
              done
            ' \
            --parameters "240" \
            --query "value[0].message" -o tsv

      - name: Resolve Metabase admin password (input/secret/fallback)
        id: mbpass
        shell: bash
        run: |
          set -euo pipefail
          INPUT="${{ inputs.admin_pass }}"
          SECRET="${{ secrets.METABASE_ADMIN_PASS }}"
          if [[ -n "$INPUT" ]]; then
            PASS="$INPUT"
            GENERATED=0
          elif [[ -n "$SECRET" ]]; then
            PASS="$SECRET"
            GENERATED=0
          else
            # Genera 20 chars alfanumericos
            PASS="$(openssl rand -base64 24 | tr -dc 'A-Za-z0-9' | head -c 20)"
            GENERATED=1
          fi
          echo "pass=${PASS}" >> "$GITHUB_OUTPUT"
          echo "generated=${GENERATED}" >> "$GITHUB_OUTPUT"

      - name: Seed Metabase via API (runs on VM, local URL)
        shell: bash
        run: |
          set -euo pipefail
          MB_PASS="${{ steps.mbpass.outputs.pass }}"
          az vm run-command invoke \
            --resource-group "$RESOURCE_GROUP" \
            --name "$VM_NAME" \
            --command-id RunShellScript \
            --scripts @"$GITHUB_WORKSPACE/scripts/setup_metabase_and_seed.sh" \
            --parameters \
              "${{ inputs.admin_email }}" \
              "$MB_PASS" \
              "Admin User" \
              "http://127.0.0.1:3000" \
              "mysql" "3306" "lab" "root" "pass" \
              "${{ inputs.db_display_name }}" \
              "Sentiment Streaming Kafka->Mongo->DL->MySQL" \
            --query "value[0].message" -o tsv

      - name: Show public access
        shell: bash
        run: |
          set -euo pipefail
          PUBIP="${{ steps.getpip.outputs.pubip }}"
          GENERATED="${{ steps.mbpass.outputs.generated }}"
          MB_PASS_OUT=""
          if [[ "${GENERATED}" == "1" ]]; then
            MB_PASS_OUT="(Password generado: ${{ steps.mbpass.outputs.pass }})"
          fi
          {
            echo "## Metabase configurado (acceso publico restringido por NSG)"
            echo
            echo "- URL:  http://${PUBIP}:3000"
            echo "- Admin: ${{ inputs.admin_email }}  ${MB_PASS_OUT}"
            echo "- Base de datos: '${{ inputs.db_display_name }}' -> host=mysql, puerto=3306, db=lab"
            echo
            echo "Notas:"
            echo "- El seed se realiza via http://127.0.0.1:3000 dentro de la VM; el acceso publico es via IP/NSG."
            echo "- mysql y metabase estan unidos a la red Docker 'labnet' para resolucion por nombre."
          } >> "$GITHUB_STEP_SUMMARY"
